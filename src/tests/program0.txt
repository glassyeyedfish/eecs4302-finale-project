PROGRAM example_10_complex_test_cases

    FUNC gcd(INT :: a, INT :: b) :: INT
    
    	INT :: result
    	
    	IF (b != 0) THEN
    		result = gcd(b, modulo(a, b))
    	END IF
    	
    	IF (b == 0) THEN
    		result = a
    	END IF
    	
    	RETURN result
    
    END FUNC
    
    FUNC lcm(INT :: a, INT :: b) :: INT
    
    	RETURN divide(a * b, gcd(a, b))
    	
    END FUNC

	
	
	!! Empty main and the division/modulo functions.
    FUNC main()
    
    	PRINT(gcd(24, 16))
    	PRINT(lcm(24, 16))
    
    END FUNC
    
    FUNC divide(INT :: n, INT :: d) :: INT
        
        RETURN divideHelper(n, d, 0)
        
    END FUNC
    
    FUNC divideHelper(INT :: a, INT :: b, INT :: q) :: INT
    
        IF (a >= b) THEN
            q = divideHelper(a - b, b, q) + 1
        END IF
        
        RETURN q
    
    END FUNC
    
    FUNC modulo(INT :: n, INT :: d) :: INT
        
        RETURN moduloHelper(n, d, 0)
        
    END FUNC
    
    FUNC moduloHelper(INT :: a, INT :: b, INT :: r) :: INT
    
        IF (a >= b) THEN
            r = moduloHelper(a - b, b, r)
        END IF
        
        IF (a < b) THEN
        	r = a
        END IF
        
        RETURN r
    
    END FUNC
    
END PROGRAM