PROGRAM example_10_complex_test_cases

	FUNC max(INT :: a, INT :: b, INT :: c) :: INT
	
		INT :: result
	
		IF (a > b) THEN
		
			IF (b > c) THEN
			
				IF (a > c) THEN
					result = a
				END IF
				
				IF (a <= c) THEN
					result = b
				END IF
			
			END IF
			
			IF (b <= c) THEN
			
				IF (a > c) THEN
					result = a
				END IF
				
				IF (a <= c) THEN
					result = c
				END IF
			
			END IF
		
		END IF
		
		IF (a <= b) THEN
		
			IF (b > c) THEN
				result = b
			END IF
			
			IF (b <= c) THEN
				result = c
			END IF
		
		END IF
		
		RETURN result
	
	END FUNC
	
	FUNC fib(INT :: n) :: INT
    
    	IF (n <= 2) THEN
			n = 1
		END IF
		
		IF (n > 2) THEN
			n = fib(n - 1) + fib(n - 2)
		END IF
		
		RETURN n
    
    END FUNC

    FUNC gcd(INT :: a, INT :: b) :: INT
    
    	INT :: result
    	
    	IF (b != 0) THEN
    		result = gcd(b, modulo(a, b))
    	END IF
    	
    	IF (b == 0) THEN
    		result = a
    	END IF
    	
    	RETURN result
    
    END FUNC
    
    FUNC lcm(INT :: a, INT :: b) :: INT
    
    	RETURN divide(a * b, gcd(a, b))
    	
    END FUNC

	
	
	!! Empty main and the division/modulo functions.
    FUNC main()
    
    	PRINT(gcd(24, 16))
    	PRINT(lcm(24, 16))
    
    END FUNC
    
    FUNC divide(INT :: n, INT :: d) :: INT
        
        RETURN divideHelper(n, d, 0)
        
    END FUNC
    
    FUNC divideHelper(INT :: a, INT :: b, INT :: q) :: INT
    
        IF (a >= b) THEN
            q = divideHelper(a - b, b, q) + 1
        END IF
        
        RETURN q
    
    END FUNC
    
    FUNC modulo(INT :: n, INT :: d) :: INT
        
        RETURN moduloHelper(n, d, 0)
        
    END FUNC
    
    FUNC moduloHelper(INT :: a, INT :: b, INT :: r) :: INT
    
        IF (a >= b) THEN
            r = moduloHelper(a - b, b, r)
        END IF
        
        IF (a < b) THEN
        	r = a
        END IF
        
        RETURN r
    
    END FUNC
    
END PROGRAM